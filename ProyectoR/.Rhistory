install.packages("agricolae")
library("agricolae", lib.loc="~/R/win-library/3.4")
detach("package:agricolae", unload=TRUE)
library("agricolae", lib.loc="~/R/win-library/3.4")
B=read.table("clipboard",header = TRUE,sep = "\t",dec = ",")
View(B)
("clipboard",header = TRUE,sep = "\t",dec = ",")
B=read.table("clipboard",header = TRUE,sep = "\t",dec = ",")
B
library(car)
attach(Datos_11)
Datos_11 <- read.csv("/Carlos Tellez Martinez/SkyDrive/Clases/Diseño de Experimentos/Curso en Blackboard/Curso/Tema 3/Videos R/Video diseño de factor simple/Datos_11.csv")
Datos_11 <- read.csv("/Carlos Tellez Martinez/SkyDrive/Clases/Diseño de Experimentos/Curso en Blackboard/Curso/Tema 3/Videos R/Video diseño de factor simple/Datos_11.csv")
Datos_11 <- read.csv("C:\Users\Ivan Bettin\Desktop\Datos_11.xlsx")
Datos_11 <- read.xlsx("C:\Users\Ivan Bettin\Desktop\Datos_11.xlsx")
Datos_11 <- read.csv(C:\Users\Ivan Bettin\Desktop\Datos_11.csv)
Datos_11 <- read.csv("C:\Users\Ivan Bettin\Desktop\Datos_11.csv")
Datos_11 <- read.table("clipboard",header = TRUE,sep = "\t",dec = ",")
View(Datos_11)
attach(Datos_11)
Spray <- factor(Spray)
Modelo <- lm(Moscas~Spray)
ANOVA <- aov(Modelo)
summary(ANOVA)
library(agricolae)
Grupos <- LSD.test(y = ANOVA, trt = "Spray", group = T, console = T)
bar.group(x = Grupos$groups, col="red", ylim=c(0,80),
main="Prueba de comparaciones múltiples",
xlab="Spray")
qqnorm(rstandard(Modelo))
qqline(rstandard(Modelo))
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(rhandsontable)
library(shiny)
editTable <- function(DF, outdir=getwd(), outfilename="table"){
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
wellPanel(
h3("Table options"),
radioButtons("useType", "Use Data Types", c("TRUE", "FALSE"))
),
br(),
wellPanel(
h3("Save"),
actionButton("save", "Save table")
)
),
mainPanel(
rHandsontableOutput("hot")
)
)
))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
## Save
observeEvent(input$save, {
finalDF <- isolate(values[["DF"]])
saveRDS(finalDF, file=file.path(outdir, sprintf("%s.rds", outfilename)))
})
})
## run app
runApp(list(ui=ui, server=server))
return(invisible())
}
library(shiny)
library(shiny)
editTable <- function(DF, outdir=getwd(), outfilename="table"){
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
wellPanel(
h3("Table options"),
radioButtons("useType", "Use Data Types", c("TRUE", "FALSE"))
),
br(),
wellPanel(
h3("Save"),
actionButton("save", "Save table")
)
),
mainPanel(
rHandsontableOutput("hot")
)
)
))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
## Save
observeEvent(input$save, {
finalDF <- isolate(values[["DF"]])
saveRDS(finalDF, file=file.path(outdir, sprintf("%s.rds", outfilename)))
})
})
## run app
runApp(list(ui=ui, server=server))
return(invisible())
}
View(editTable)
View(editTable)
shiny::runApp('GitHub/Regresion-lineal_R/ProyectoR')
shiny::runApp('GitHub/Regresion-lineal_R/ProyectoR')
runApp('GitHub/Regresion-lineal_R/ProyectoR')
runApp('GitHub/Regresion-lineal_R/ProyectoR')
